# -*- coding: utf-8 -*-
"""SALES PREDICTION USING PYTHON.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YHv5RREuD8O0HDGIryCUuJyhUaeycWiJ

SALES PREDICTION USING PYTHON
"""

# Importing the libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.metrics import accuracy_score

"""Data Collecting and Processing:"""

# Load data from CSV file
advertising = pd.read_csv('advertising.csv')
advertising.head()

# No of rows and columns
np.shape(advertising)

# Getting the information of the data
advertising.info()

# Returns the description of transpose form
advertising.describe

# Checking the null values in dataset
advertising.isnull().sum()

"""Handling the missing values and Replacing the missing values:"""

#replacing the missing values in "Radio","Newspaper","TV","Sales" column with the mean value
advertising['Radio'].fillna(advertising['Radio'].mean(), inplace=True)
advertising['Newspaper'].fillna(advertising['Newspaper'].mean(), inplace=True)
advertising['TV'].fillna(advertising['TV'].mean(), inplace=True)
advertising['Sales'].fillna(advertising['Sales'].mean(), inplace=True)

"""
Encoding Categorical Variables:"""

from sklearn.preprocessing import LabelEncoder

# Encoding categorical variables using LabelEncoder
label_encoders = {}

# List of columns containing categorical variables
categorical_columns = ['TV', 'Radio', 'Newspaper']

for column in categorical_columns:
    label_encoders[column] = LabelEncoder()
    advertising[column] = label_encoders[column].fit_transform(advertising[column])

# If you need one-hot encoding (for nominal categorical variables), you can use pandas' get_dummies function
# data = pd.get_dummies(data, columns=['ColumnName'])

# Now, the categorical variables are encoded as numerical values
# You can access the label encoders if you need to transform the data back to its original form
# Example: data['Gender'] = label_encoders['Gender'].inverse_transform(data['Gender'])

#Getting the some statistical measures
advertising.describe()

"""Spliting the data into features:"""

# Split the data into features (X) and target variable (y)
X = advertising.drop('Sales', axis=1)  # Features
y = advertising['Sales']  # Target variable

"""Spliting the Data into Training and Testing Sets:"""

# Split the data into 80% training and 20% testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

""" Training a Machine Learning Model:"""

# Initialize the Linear Regression model
model = LinearRegression()

# Train the model with the training data
model.fit(X_train, y_train)

"""Making Predictions and Evaluate the Model:"""

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculating the mean squared error and R-squared score
mse = mean_squared_error(y_test, predictions)
r2 = r2_score(y_test, predictions)
print(f'Mean Squared Error: {mse}')
print(f'R-squared Score: {r2}')

# Making predictions against the actual values
plt.scatter(y_test, predictions)
plt.xlabel('Actual Sales')
plt.ylabel('Predicted Sales')
plt.title('Actual Sales vs Predicted Sales')
plt.show()
